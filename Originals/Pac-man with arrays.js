// Link:  https://www.khanacademy.org/computer-programming/pac-man-with-arrays/4818796489867264
// Created:  01/15/2016 11:20





// 14 wide, 14 high
// This is Blinky from Pac-man.
// This maze is 28 tiles wide and 36 tiles tall.

var drawBlinky = function(){
    noStroke();
    var Matrix = [[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 0, 0],
                      [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 0, 0, 0],
                      [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 0, 0, 0, 0],
                      [3,2,2,2,2,2,2,2,2,2,2,2,2,10,3,2,2,2,2,2,2,2,2,2,2, 2, 2, 10],
                      [7,1,1,1,1,1,1,1,1,1,1,1,1,5,11,1,1,1,1,1,1,1,1,1, 1, 1, 1, 8],
                      [7,1,3,6,6,10,1,3,6,6,6,10,1,5,11,1,3,6,6,6,10,1,3,6,6,10,1,8],
                      [7,1,5,0,0,11,1,5,0,0,0,11,1,5,11,1,5,0,0,0,11,1,5,0,0,11,1,8],
                      [7,1,4,6,6,9,1,4,6,6,6,9,1,4,9,1,4,6,6,6,9,1,4, 6, 6, 9, 1, 8],
                      [7,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1, 1, 1, 1, 8],
                      [7,1,3,6,6,10,1,3,10,1,3,6,6,6,6,6,6,10,1,3,10,1,3,6,6,10, 1, 8],
                      [7,1,4,6,6,9,1,5,11,1,4,6,6,10,3,6,6,9,1,5,11,1,4,6,6,9, 1, 8],
                      [7,1,1,1,1,1,1,5,11,1,1,1,1,5,11,1,1,1,1,5,11,1,0,0,0,0,1, 8],
                      [4,2,2,2,2,10,1,5,4,6,6,10,0,5,11,0,3,6,6,9,11,1,3,2,2,2,2,9],
                      [0,0,0,0,0,11,1,5,3,6,6,9,0,4,9,0,4,6,6,10,11,1,5,0,0,0,0,0],
                      [0,0,0,0,0,11,1,5,11,0,0,0,0,0,0,0,0,0,0,5,11,1,5,0,0,0,0,0],
                      [0,0,0,0,0,11,1,5,11,0,0,0,0,0,0,0,0,0,0,5,11,1,5,0,0,0,0,0],
                      [2,2,2,2,2,9,1,4,9,0,0,0,0,0,0,0,0,0,0,4,9,1,4,2,2,2,2,2],
                      [0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0],
                      [2,2,2,2,2,10,1,3,10,0,0,0,0,0,0,0,0,0,0,3,10,1,3,2,2,2,2,2],
                      [0,0,0,0,0,11,1,5,11,0,0,0,0,0,0,0,0,0,0,5,11,1,5,0,0,0,0,0],
                      [0,0,0,0,0,11,1,5,11,0,0,0,0,0,0,0,0,0,0,5,11,1,5,0,0,0,0,0],
                      [0,0,0,0,0,11,1,5,11,0,0,0,0,0,0,0,0,0,0,5,11,1,5,0,0,0,0,0],
                      [3,2,2,2,2,9,1,4,9,0,0,0,0,0,0,0,0,0,0,4,9,1,4,2,2,2,2,10],
                      [7,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,8],
                      [7,1,0,0,0,0,1,0,0,0,0,0,1,0,0,1,0,0,0,0,0,1,0,0,0,0,1,8],
                      [7,1,0,0,0,0,1,0,0,0,0,0,1,0,0,1,0,0,0,0,0,1,0,0,0,0,1,8],
                      [7,1,1,1,0,0,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,0,0,1,1,1,8],
                      [4,6,10,1,0,0,1,0,0,1,3,6,6,6,6,6,6,10,1,0,0,1,0,0,1,3,6,9],
                      [3,6,9,1,0,0,1,0,0,1,4,6,6,10,3,6,6,9,1,0,0,1,0,0,1,4,6,10],
                      [7,1,1,1,1,1,1,0,0,1,1,1,1,5,11,1,1,1,1,0,0,1,1,1,1,1,1,8],
                      [7,1,0,0,0,0,0,0,0,0,0,0,1,5,11,1,0,0,0,0,0,0,0,0,0,0,1,8],
                      [7,1,0,0,0,0,0,0,0,0,0,0,1,4,9,1,0,0,0,0,0,0,0,0,0,0,1,8],
                      [7,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,8],
                      [4,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,9],
                      [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                      [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                      ];
    for(var r=0; r<Matrix.length; r++) {
        for(var c=0; c<Matrix[r].length; c++) {
            var id = Matrix[r][c];
            switch(id) {
                case 0: // Blank black tile
                    fill(0, 0, 0);
                    rect(c*18.0,r*16.7,17.5,16.5);
                    break;
                case 1: // 10pt pellet
                    fill(0);
                    rect(c*18,r*16.7,17.5,16.5);
                    fill(255, 254, 240);
                    rect(c*18+7,r*16.7+7,3,3);
                    break;
                case 2: // Top wall
                    fill(0);
                    rect(c*18,r*16.7,17.5,16.5);
                    stroke(0, 0, 255);
                    strokeWeight(2);
                    fill(0);
                    rect(c*18,r*16.7,18,0.2);
                    rect(c*18,r*16.7+5,18,0.2);
                    noStroke();
                    break;
                case 3: // Up to right
                    fill(0, 0, 0);
                    rect(c*18.0,r*16.7,17.5,16.5);
                    fill(0, 0, 255);
                    rect(c*18+12,r*16.7+9,2,2);
                    rect(c*18+14,r*16.7+7,6,2);
                    rect(c*18+10,r*16.7+11,2,6);
                    break;
                case 4: // Left to up
                    fill(0, 0, 0);
                    rect(c*18.0,r*16.7,17.5,16.5);
                    fill(0, 0, 255);
                    rect(c*18+12,r*16.7+5,2,2);
                    rect(c*18+14,r*16.7+7,5,2);
                    rect(c*18+10,r*16.7,2,5);
                    break;
                case 5: // Left vertical line wall
                    fill(0);
                    rect(c*18.0,r*16.7,17.5,16.5);
                    fill(0, 0, 255);
                    rect(c*18.0+10,r*16.7,2.1,16.5);
                    break;
                case 6: // Horizontal line wall
                    fill(0);
                    rect(c*18,r*16.7,17.5,16.5);
                    stroke(0, 0, 255);
                    strokeWeight(2);
                    fill(0);
                    rect(c*18,r*16.7+8,18,0.1);
                    noStroke();
                    break;
                case 7: // Left wall
                    fill(0);
                    rect(c*18,r*16.7,17.5,16.5);
                    stroke(0, 0, 255);
                    strokeWeight(2);
                    fill(0);
                    rect(c*18+6,r*16.7,0.2,18);
                    rect(c*18+1,r*16.7,0.2,18);
                    noStroke();
                    break;
                case 8: // Right wall
                    fill(0);
                    rect(c*18,r*16.7,17.5,16.5);
                    stroke(0, 0, 255);
                    strokeWeight(2);
                    fill(0);
                    rect(c*18+12,r*16.7,0.2,18);
                    rect(c*18+7,r*16.7,0.2,18);
                    noStroke();
                    break;
                case 9: // Right to up
                    fill(0, 0, 0);
                    rect(c*18.0,r*16.7,17.5,16.5);
                    fill(0, 0, 255);
                    rect(c*18+5,r*16.7+5,2,2);
                    rect(c*18+7,r*16.7+0,2,5);
                    rect(c*18+0,r*16.7+7,5,2);
                    break;
                case 10: // Right to down
                    fill(0, 0, 0);
                    rect(c*18.0,r*16.7,17.5,16.5);
                    fill(0, 0, 255);
                    rect(c*18+5,r*16.7+9,2,2);
                    rect(c*18+7,r*16.7+11,2,6);
                    rect(c*18+0,r*16.7+7,5,2);
                    break;
                case 11: // Right vertial line wall
                    fill(0);
                    rect(c*18.0,r*16.7,17.5,16.5);
                    fill(0, 0, 255);
                    rect(c*18.0+7,r*16.7,2.1,16.5);
                    break;
                case 50: // White tile
                    fill(255);
                    rect(c*18,r*16.7,17.5,16.5);
                    break;
            }
        }
    }
};

// Draws Blinky
pushMatrix();
drawBlinky();
fill(255, 0, 0);
text("Work In Progress", 210, 332);
popMatrix();

/*
var drawLevel = function(){
    var babyWinston =getImage("creatures/BabyWinston");
    var enemybug = getImage("cute/EnemyBug");
    noStroke();
    var roomMatrix = [[1,2,1,1,1,2,1,1],
                      [0,0,1,1,1,0,0,0],
                      [1,0,1,1,1,0,1,1],
                      [1,0,0,0,0,0,1,1],
                      [1,1,0,0,0,0,1,1],
                      [2,0,0,0,0,0,0,0],
                      [1,0,1,1,1,0,1,0],
                      [1,0,1,1,1,0,0,2]];
    for(var row=0; row<roomMatrix.length; row++) {
        for(var col=0; col<roomMatrix[row].length; col++) {
            var id = roomMatrix[row][col];
            switch(id) {
                case 0:
                    fill(100, 150, 175);
                    rect(col*50,row*50,50,50);
                    break;
                case 1:
                    fill(100,100, 100);
                    rect(col*50,row*50,50,50);
                    break;
                case 2:
                    fill(100, 150,175);
                    rect(col*50,row*50,50,50);
                    pushMatrix();
                    scale(0.5);
                    image(enemybug,col*2*50,-55+row*2*50);
                    popMatrix();
                    break;
            }
        }
    }
    
    pushMatrix();
    scale(0.75);
    image(babyWinston,150,250);
    popMatrix();
};

// Draw Level
drawLevel();
    

*/
